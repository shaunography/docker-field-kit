# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi


set -o vi

# set CDPATH 
CDPATH="~:/media/shaun/data/:/var/home/shaun/"

export EDITOR=/usr/bin/nvim
export VISUAL=/usr/bin/nvim

alias lt='ls -ltr'
alias la='ls -la'


function stdprompt_hostname() { # $1 = color
	echo -n "\[\033[0;${1}m\]"
	echo -n "\h"
	echo -n "\[\033[0m\]"
}

function stdprompt_time() { # $1 = color
	echo -n "\[\033[0;${1}m\]"
	echo -n "$(date +%H:%M:%S)"
	echo -n "\[\033[0m\]"
}

if [ -e /usr/share/git-core/contrib/completion/git-prompt.sh ]; then
	source /usr/share/git-core/contrib/completion/git-prompt.sh
fi

# calculate it once since it's not likely to change in one session
__home_realpath=$(realpath $HOME)

function stdprompt_dir() { # $1 = dir, $2 = git root

	local pwd_realpath
	pwd_realpath=$(realpath $PWD)

	# Get the real path to the repo's root
	local repo_realpath
	if [ -x /bin/git ]; then
		repo_realpath=$(git rev-parse --show-toplevel 2> /dev/null)
	fi

	# A tricky bit on atomic-ws here is that the default dir when starting bash
	# is not $HOME (which is /home/jlebon), but `realpath $HOME`, which is
	# /var/home/jlebon.  So we need to be able to translate both $HOME and
	# $(realpath $HOME) into ~.

	# Get the current dir, but abbreviate homedir if present
	local pwd=$PWD # default to $PWD
	if [[ $pwd_realpath == $__home_realpath ]]; then
		pwd='~'
	# handle /home/jlebon subdir
	elif [[ $PWD == $HOME/* ]]; then
		pwd='~'${pwd:${#HOME}}
	# handle /var/home/jlebon subdir
	elif [[ $PWD == $__home_realpath/* ]]; then
		pwd='~'${PWD:${#__home_realpath}}
	fi

	# Are we even in a repo?
	if [[ -n "$repo_realpath" ]]; then

		# Calculate how deep we are in the repo
		local diff=$((${#pwd_realpath} - ${#repo_realpath}))

		# Get the name of the repo (we use pwd instead of repo_realpath in
		# case the repo name is itself a symlink)
		local repo_name=$(basename ${pwd::$((${#pwd} - $diff))})

		# Calculate the paths before and after the repo name
		local head=${pwd::$((${#pwd} - $diff - ${#repo_name}))}
		if [ $diff -gt 0 ]; then
			local tail=${pwd:$((-$diff))}
		fi

		echo -n "\[\033[0;${1}m\]"
		echo -n "$head"

		echo -n "\[\033[0;${2}m\]"
		echo -n "$repo_name"

		echo -n "\[\033[0;${1}m\]"
		echo -n "$tail"
	else
		echo -n "\[\033[0;${1}m\]"
		echo -n "$pwd"
	fi

	echo -n "\[\033[0m\]"
}

function stdprompt_gitbranch() { # $1 = color
	echo -n "\[\033[0;${1}m\]"
	echo -n "\$(__git_ps1 \"%s\")"
	echo -n "\[\033[0m\]"
}

# calculate it once since it's not likely to change in one session
__in_containerenv=no
if [ -f /.dockerenv ] || [ -f /run/.containerenv ]; then
	__in_containerenv=yes
fi

function stdprompt() {

	local rc=$?

	if [[ $__in_containerenv == no ]]; then
		echo -n "["
	else
		echo -n "{"
	fi

	# if this becomes too annoying, we could instead:
	# - rely on bash history timestamps
	# - the above + emit a new history msg to signal when commands finish
	#stdprompt_time 36

	#echo -n " "

	# print hostname
	# blue for normal, red for root
	if [ $UID -ne 0 ]; then
		stdprompt_hostname 34
	else
		stdprompt_hostname 31
	fi

	echo -n " "

	# print dir in yellow, git root in green
	stdprompt_dir 33 32

	# purple branch
	#if rpm -q git &>/dev/null && [[ -n "$(git rev-parse --show-toplevel 2>/dev/null)" ]]; then
	if [[ -n "$(git rev-parse --show-toplevel 2>/dev/null)" ]]; then
		echo -n " "
		stdprompt_gitbranch 35
	fi

	if [[ $__in_containerenv == no ]]; then
		echo -n "]"
	else
		echo -n "}"
	fi

	if [ -n "${PS1_MARKER:-}" ]; then
		echo -n " <$PS1_MARKER>"
	fi

	if [ $rc -ne 0 ]; then
		echo -n "\[\033[0;31m\]"
	fi

	if [ $UID -ne 0 ]; then
		echo -n "$ "
	else
		echo -n "# "
	fi

	echo -n "\[\033[0m\]"
}

PROMPT_COMMAND="PS1=\$(stdprompt)"

function mark_prompt {
	PS1_MARKER="$1"
}
